{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOqzujC7I2HmEDT3+mVy1c0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SenaraSilva/SenaraESA/blob/main/Atividade%2004%3A%20Lista%20de%20Exerc%C3%ADcios%20de%20Revis%C3%A3o%201\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "G4dTi7692pGB",
        "outputId": "45b3ca1a-3d28-47fc-96d6-ac722e26d987"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Olá mundo\n"
          ]
        }
      ],
      "source": [
        "# 1. Escreve um programa que imprima \"Olá mundo\"\n",
        "print(\"Olá mundo\")\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Crie um programa que leia três notas de um aluno e cálcule a média final.\n",
        "n1 = float(input(\"Digite a nota 1: \"))\n",
        "n2 = float( input(\"Digite a nota 2:  \"))\n",
        "n3 = float( input(\"Digite a nota 3: \"))\n",
        "media = (n1 + n2 + n3) / 3\n",
        "print(f\"A média final das notas é:{ media:.2f }\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 237
        },
        "id": "fwnyiKJX3ZXh",
        "outputId": "7d50a26f-b80e-485e-e43f-0fde614b453e"
      },
      "execution_count": 28,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Digite a nota 1: 8\n",
            "Digite a nota 2:  7\n",
            "Digite a nota 3: 6\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "Invalid format specifier",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-28-2738c21a8dbd>\u001b[0m in \u001b[0;36m<cell line: 6>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mn3\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfloat\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0minput\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Digite a nota 3: \"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mmedia\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mn1\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mn2\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mn3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"A média final das notas é:{ media:.2f }\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m: Invalid format specifier"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from ast import NodeTransformer\n",
        "# 3. Escreva um programa que cálcule a média, permitindo a repetida de notas até que o usuario indique que não deseja mais inserir.\n",
        "notas = []\n",
        "while True:\n",
        "   nota = input(\"Digite uma nota ( ou 'sair' para encerrar) :\")\n",
        "    if nota.lower()== 'sair':\n",
        "        break\n",
        "    try:\n",
        "        notas.append( float(nota))\n",
        "    except ValueError:\n",
        "      print(\"Entrada inválida. Por favor, digite um número ou 'sair'.\")\n",
        "   if Notas:\n",
        "    media = sum(notas) / len(notas)\n",
        "    print(f\"A média das notas é: {media: .2f}\")\n",
        "   else:\n",
        "    print(nenhuma nota foi inserida)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "w2PnCo6h-Ufc",
        "outputId": "c30f28d7-2091-4d70-fa60-e9b785f5baa7"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "error",
          "ename": "IndentationError",
          "evalue": "unexpected indent (<ipython-input-21-9d9a958d65be>, line 6)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-21-9d9a958d65be>\"\u001b[0;36m, line \u001b[0;32m6\u001b[0m\n\u001b[0;31m    if nota.lower()== 'sair':\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m unexpected indent\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Crie um programa que leia três números e determine o maior deles\n",
        "n1 = input(\"Digite o número 1: \")\n",
        "n2 = input(\"Digite o número 2: \")\n",
        "n3 = input(\"Digite o número 3: \")\n",
        "if n1 > n2 and n1 > n3:\n",
        "  maior = n1\n",
        "  elif n2 > n1 and n2 > n3:\n",
        "    maior = n2\n",
        "  else:\n",
        "    maior = n3\n",
        "  print(f\"O maior número é: {maior}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 110
        },
        "id": "OjqpKay_Epbq",
        "outputId": "e7396ce4-5d1e-4bfb-b097-48453cce6884"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "error",
          "ename": "SyntaxError",
          "evalue": "invalid syntax (<ipython-input-22-bdf98292cf9b>, line 7)",
          "traceback": [
            "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-22-bdf98292cf9b>\"\u001b[0;36m, line \u001b[0;32m7\u001b[0m\n\u001b[0;31m    elif n2 > n1 and n2 > n3:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: 5. Desenvolva um programa que monitore a qualidade da água de um reservatório usando um loop while.\n",
        "\n",
        "# Parâmetros iniciais\n",
        "nivel_ideal = 50  # Nível ideal de água\n",
        "qualidade_ideal = 7.0  # pH ideal da água\n",
        "temperatura_ideal = 25  # Temperatura ideal da água em Celsius\n",
        "\n",
        "# Loop de monitoramento\n",
        "while True:\n",
        "  nivel_atual = float(input(\"Digite o nível atual da água: \"))\n",
        "  qualidade_atual = float(input(\"Digite o pH atual da água: \"))\n",
        "  temperatura_atual = float(input(\"Digite a temperatura atual da água (Celsius): \"))\n",
        "\n",
        "  # Verificações e ações\n",
        "  if nivel_atual < nivel_ideal:\n",
        "    print(\"Nível de água abaixo do ideal. Acionando sistema de reabastecimento.\")\n",
        "  elif nivel_atual > nivel_ideal:\n",
        "    print(\"Nível de água acima do ideal. Acionando sistema de drenagem.\")\n",
        "  else:\n",
        "    print(\"Nível de água ideal.\")\n",
        "\n",
        "  if qualidade_atual < qualidade_ideal:\n",
        "    print(\"pH da água abaixo do ideal. Acionando sistema de correção de pH.\")\n",
        "  elif qualidade_atual > qualidade_ideal:\n",
        "    print(\"pH da água acima do ideal. Acionando sistema de correção de pH.\")\n",
        "  else:\n",
        "    print(\"pH da água ideal.\")\n",
        "\n",
        "  if temperatura_atual < temperatura_ideal:\n",
        "    print(\"Temperatura da água abaixo do ideal. Acionando sistema de aquecimento.\")\n",
        "  elif temperatura_atual > temperatura_ideal:\n",
        "    print(\"Temperatura da água acima do ideal. Acionando sistema de resfriamento.\")\n",
        "  else:\n",
        "    print(\"Temperatura da água ideal.\")\n",
        "\n",
        "  continuar = input(\"Deseja continuar monitorando? (s/n): \")\n",
        "  if continuar.lower() != 's':\n",
        "    break\n",
        "\n",
        "print(\"Monitoramento encerrado.\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iyjL-q2aGhjG",
        "outputId": "898b3332-7208-4691-e372-96d5e23bac5b"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite o nível atual da água: 3\n",
            "Digite o pH atual da água: 6.2\n",
            "Digite a temperatura atual da água (Celsius): 25\n",
            "Nível de água abaixo do ideal. Acionando sistema de reabastecimento.\n",
            "pH da água abaixo do ideal. Acionando sistema de correção de pH.\n",
            "Temperatura da água ideal.\n",
            "Deseja continuar monitorando? (s/n): n\n",
            "Monitoramento encerrado.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: 7. Escreva um programa que imprima todos os números ímpares de 1 a 50 usando um loop for.\n",
        "\n",
        "# Imprime todos os números ímpares de 1 a 50 usando um loop for\n",
        "for numero in range(1, 51):\n",
        "  if numero % 2 != 0:\n",
        "    print(numero)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-5SJAlloHBFk",
        "outputId": "2f090715-2d7f-4502-c45d-e24abb20cb3b"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n",
            "3\n",
            "5\n",
            "7\n",
            "9\n",
            "11\n",
            "13\n",
            "15\n",
            "17\n",
            "19\n",
            "21\n",
            "23\n",
            "25\n",
            "27\n",
            "29\n",
            "31\n",
            "33\n",
            "35\n",
            "37\n",
            "39\n",
            "41\n",
            "43\n",
            "45\n",
            "47\n",
            "49\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# prompt: 8. Desenvolva um programa que utilize os objetos built-in do Python para realizar operações com listas e dicionários.\n",
        "\n",
        "# Criando uma lista\n",
        "minha_lista = [1, 2, 3, \"Olá\", True]\n",
        "\n",
        "# Adicionando elementos à lista\n",
        "minha_lista.append(4)\n",
        "minha_lista.extend([5, 6])\n",
        "\n",
        "# Removendo elementos da lista\n",
        "minha_lista.remove(\"Olá\")\n",
        "elemento_removido = minha_lista.pop(0)\n",
        "\n",
        "# Acessando elementos da lista\n",
        "primeiro_elemento = minha_lista[0]\n",
        "ultimo_elemento = minha_lista[-1]\n",
        "\n",
        "# Fatiando a lista\n",
        "sublista = minha_lista[1:4]\n",
        "\n",
        "# Criando um dicionário\n",
        "meu_dicionario = {\"nome\": \"Matheus\", \"idade\": 35, \"cidade\": \"Rio de Janeiro\"}\n",
        "\n",
        "# Adicionando elementos ao dicionário\n",
        "meu_dicionario[\"profissão\"] = \"Encanador\"\n",
        "\n",
        "# Removendo elementos do dicionário\n",
        "del meu_dicionario[\"cidade\"]\n",
        "\n",
        "# Acessando elementos do dicionário\n",
        "nome = meu_dicionario[\"nome\"]\n",
        "idade = meu_dicionario.get(\"idade\")\n",
        "\n",
        "# Iterando sobre a lista e o dicionário\n",
        "for elemento in minha_lista:\n",
        "    print(elemento)\n",
        "\n",
        "for chave, valor in meu_dicionario.items():\n",
        "    print(f\"{chave}: {valor}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "knTbCC_iHNc4",
        "outputId": "5c8bf1e1-537b-4089-8cab-7d7f83dc027a"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2\n",
            "3\n",
            "True\n",
            "4\n",
            "5\n",
            "6\n",
            "nome: Matheus\n",
            "idade: 35\n",
            "profissão: Encanador\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "WNQ2spVP-Utg"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}